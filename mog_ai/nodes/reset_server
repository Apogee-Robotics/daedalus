#!/usr/bin/env python
import rospy
from std_msgs.msg import Empty
from std_srvs.srv import Trigger, TriggerResponse
from geometry_msgs.msg import Wrench
from geometry_msgs.msg import Pose
from mujoco_ros.srv import ApplyForce
from mujoco_ros.srv import SetBody

import numpy as np
from time import sleep

# Currently only using 1 object, this will change as we move to more
OBJECT_ID = 2

rospy.wait_for_service('/mujoco/apply_force')
apply_force = rospy.ServiceProxy('/mujoco/apply_force', ApplyForce)
set_body = rospy.ServiceProxy('/mujoco/set_body', SetBody)
reset = rospy.ServiceProxy('/mujoco/reset', Trigger)


def reset_cb(req):
    #reset()

    pose = Pose()
    pose.position.x = np.random.uniform(low=-1.5, high=-1.2)
    pose.position.y = np.random.uniform(low=-0.1, high=0.1)
    pose.position.z = np.random.uniform(low=0, high=0.5)
    status = set_body("object", pose)
    rospy.loginfo("status: " + str(status))
    if status.success == False:
        return TriggerResponse(False, 'Setting object position failed.')
    
    
    sleep(0.1)
    wrench = Wrench()
    wrench.force.x = np.random.uniform(low=0.1, high=0.5)
    wrench.force.y = np.random.uniform(low=-0.05, high=0.05)
    wrench.force.z = np.random.uniform(low=-0.05, high=0.05)
    wrench.torque.x = np.random.uniform(low=-0.001, high=0.001)
    wrench.torque.y = np.random.uniform(low=-0.001, high=0.001)
    wrench.torque.z = np.random.uniform(low=-0.001, high=0.001)
    apply_duration = 0.1
    apply_force("object", wrench, apply_duration)

    return TriggerResponse(True, 'Applying object force failed.')

def main():
    rospy.init_node('reset_server')
    rospy.Service('random_reset', Trigger, reset_cb)
    rospy.loginfo("Running...")
    rospy.spin()


if __name__ == "__main__":
    main()