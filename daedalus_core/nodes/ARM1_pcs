#!/usr/bin/env python3

import rospy
import smach
import smach_ros

print("Importing...")

from daedalus_core.pcs_move_states import *
from daedalus_core.pcs_states import *


class Simulation_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()
        

    
    def mission_sm(self):
        with self.sm:

            #example states
            
            #smach.StateMachine.add('Init_Arm_sync', ARM_Sync('init', timeout=60),
             #   transitions={'Ready': 'Unfold',
              #               'Timeout': 'Mission_Fail'})
            
            #smach.StateMachine.add('Pickup_Cube', Pickup_Cube_SM,
            #        transitions={'Success': 'Unfold',
            #                     'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Unfold', Unfold_SM,
                    transitions={'Success': 'Mission_Success',
                                 'Fail': 'Mission_Fail'})





# states to follow the state machine

            #smach.StateMachine.add('Init_Arms', init_arms(), 
            #                       transitions={'Success': 'Unfold_Arms', 
            #                                    'Fail': 'init'})

            #smach.StateMachine.add('Unfold_Arms', unfold_SM, 
            #                       transitions={'Success': 'Pickup_Obj_1',
            #                                    'Fail': 'init'})

# ball 1
            smach.StateMachine.add('Pickup_Obj_1', pickup_obj_1_SM,
                                    transitions={'Success': 'Handoff_1',
                                                 'Fail': 'Home_Pos_1'}) #done
            
            smach.StateMachine.add('Handoff_1', handoff_1_SM, 
                                   transitions={'Success': 'Home_Pos_1',
                                                'Fail': 'Home_Pos_1'}) #done
            
            smach.StateMachine.add('Home_Pos_1', home_pos_1_SM, 
                                   transitions={'Success': 'Handoff_2',
                                               'Fail': 'Handoff_2'}) #done

# ball 2
            smach.StateMachine.add('Handoff_2', handoff_2_SM, 
                                   transitions={'Success': 'Discard',
                                                'Fail': 'Home_Pos_2'}) # done
            
            smach.StateMachine.add('Discard', discard_obj_2_SM,
                                   transitions={'Success': 'Home_Pos_2',
                                                'Fail': 'Home_Pos_2'})

            smach.StateMachine.add('Home_Pos_2', home_pos_2_SM,
                                   transitions={'Success': 'Home_Pos_2',
                                               'Fail': 'Pickup_Obj_3'})

# cube 1
            smach.StateMachine.add('Pickup_Obj_3', pickup_obj_3_SM,
                                   transitions={'Success': 'Throw_3',
                                                'Fail': 'Home_Pos_3'})
            
            smach.StateMachine.add('Throw_3', handoff_3_SM,
                                   transitions={'Success': 'Home_Pos_3',
                                   'Fail': 'Home_Pos_3'})
            
            smach.StateMachine.add('Home_Pos_3', home_pos_3_SM,
                                   transitions={'Success': 'Fold_Arms',
                                   'Fail': 'Fold_Arms'})

# done
            smach.StateMachine.add('Fold_Arms', Fold_SM, transitions={'Success': 'Mission_Success', 'Fail': 'Mission_Fail'})
            #smach.StateMachine.add('Deinit', deinit_SM, transitions={'Else': 'Deinit'})


    def run(self):
        folding = rospy.get_param('joints/folding')
        print(len(folding))
        outcome = self.sm.execute()



class IRL_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    def mission_sm(self):
        with self.sm:
            smach.StateMachine.add('Wait_for_Jetson_Sync', ARM_Sync(0, timeout=30),
                    transitions={'Ready': 'Blink_on',
                                 'Timeout': 'Mission_Fail'})

            smach.StateMachine.add('Blink_on', PCS_Activate_State('led'),
                    transitions={'Complete': 'Blink_Delay',
                                 'Error': 'Mission_Fail'})

            smach.StateMachine.add('Blink_Delay', Wait_State(1),
                    transitions={'Complete': 'Blink_off'})

            smach.StateMachine.add('Blink_off', PCS_Deactivate_State('led'),
                    transitions={'Complete': 'Wait_for_TE',
                                 'Error': 'Mission_Fail'})

            smach.StateMachine.add('Wait_for_TE', Detector_Status('te_detection'),
                    transitions={'On': 'TE_Sync',
                                 'Off': 'Wait_for_TE_delay'})

            smach.StateMachine.add('Wait_for_TE_delay', Wait_State(0.5),
                    transitions={'Complete': 'Wait_for_TE'})
            
            smach.StateMachine.add('TE_Sync', ARM_Sync("TE", timeout=15),
                    transitions={'Ready': 'Success_led',
                                 'Timeout': 'Mission_Fail'})

            smach.StateMachine.add('Success_led', PCS_Activate_State('led'),
                    transitions={'Complete': 'Mission_Success',
                                 'Error': 'Mission_Fail'})

    def run(self):
        outcome = self.sm.execute()
    

if __name__ == "__main__":
    rospy.init_node("mission_sm")
    sm = Simulation_SM()
    sm.run()