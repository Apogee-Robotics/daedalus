#!/usr/bin/env python3

import rospy
import smach
import smach_ros


#from daedalus_core.pcs_move_states import *
from daedalus_core.pcs_states import *


class Simulation_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    
    def mission_sm(self):
        with self.sm:
            
            smach.StateMachine.add('Init_Arm_sync', ARM_Sync('init', timeout=60),
                transitions={'Ready': 'Pickup_Cube',
                             'Timeout': 'Mission_Fail'})
            

            smach.StateMachine.add('Pickup_Cube', Pickup_Cube_SM,
                    transitions={'Success': 'Unfold',
                                 'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Unfold', Unfold_SM,
                    transitions={'Success': 'Mission_Success',
                                 'Fail': 'Mission_Fail'})
            """
            smach.StateMachine.add('Fold', Fold_SM,
                    transitions={'Success': 'Mission_Success',
                                 'Fail': 'Mission_Fail'})
            """

    def run(self):
        folding = rospy.get_param('joints/folding')
        print(len(folding))
        outcome = self.sm.execute()



class IRL_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    def mission_sm(self):
        with self.sm:
            smach.StateMachine.add('Wait_for_TE', Detector_Status('/te_detection'),
                    transitions={'On': 'Wait_for_Jetson_Sync',
                                 'Off': 'Wait_for_TE_delay'})

            smach.StateMachine.add('Wait_for_TE_delay', Wait_State(0.5),
                    transitions={'Complete': 'Wait_for_TE'})
            
            smach.StateMachine.add('Wait_for_Jetson_Sync', ARM_Sync("TE", timeout=15),
                    transitions={'Ready': 'Mission_Success',
                                 'Timeout': 'Mission_Fail'})

    def run(self):
        outcome = self.sm.execute()
    

if __name__ == "__main__":
    rospy.init_node("mission_sm")
    sm = IRL_SM()
    sm.run()