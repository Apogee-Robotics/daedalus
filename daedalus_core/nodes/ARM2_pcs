#!/usr/bin/env python

import rospy
import smach
import smach_ros


from daedalus_core.pcs_states import *
#from daedalus_core.pcs_move_states import *

class Mission_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    
    def mission_sm(self):
        with self.sm:


# start movment SM here
            smach.StateMachine.add('Init_Arm_sync', ARM_Sync("init", timeout=60),
                transitions={'Ready': 'Unfold',
                             'Timeout': 'Mission_Fail'}) #

            smach.StateMachine.add('Unfold', Unfold_SM,
                    transitions={'Success': 'Mission_Success',
                                 'Fail': 'Mission_Fail'}) #

# ball 1
            smach.StateMachine.add('Handoff_1', handoff_1_SM_ARM2, 
                                   transitions={'Success': 'Discard_1',
                                                'Fail': 'Home_Pos_1'}) #
            
            smach.StateMachine.add('Discard_1', discard_obj_1_SM_ARM2,
                                   transitions={'Success': 'Home_Pos_1',
                                                'Fail': 'Home_Pos_1'}) #

            smach.StateMachine.add('Home_Pos_1', home_pos_1_SM_ARM2,
                                   transitions={'Success': 'Pickup_Obj_2',
                                               'Fail': 'Pickup_Obj_2'}) #

# ball 2
            smach.StateMachine.add('Pickup_Obj_2', pickup_obj_2_SM_ARM2,
                                    transitions={'Success': 'Handoff_2',
                                                 'Fail': 'Home_Pos_2'}) #
            
            smach.StateMachine.add('Handoff_2', handoff_2_SM_ARM2, 
                                   transitions={'Success': 'Home_Pos_2',
                                                'Fail': 'Home_Pos_2'}) #
            
            smach.StateMachine.add('Home_Pos_2', home_pos_2_SM_ARM2, 
                                   transitions={'Success': 'Handoff_3',
                                               'Fail': 'Handoff_3'}) #

# cube 1
            smach.StateMachine.add('Handoff_3', handoff_3_SM_ARM2, 
                                   transitions={'Success': 'Discard_3',
                                                'Fail': 'Home_Pos_3'}) #
            
            smach.StateMachine.add('Discard_3', discard_obj_3_SM_ARM2,
                                   transitions={'Success': 'Home_Pos_3',
                                                'Fail': 'Home_Pos_3'}) #

            smach.StateMachine.add('Home_Pos_3', home_pos_3_SM_ARM2,
                                   transitions={'Success': 'Fold_Arms',
                                               'Fail': 'Fold_Arms'}) #

# done
            smach.stateMachine.add('Fold_Arms', fold_arms_SM, 
                                   transitions={'Success': 'Deinit',
                                                'Fail': 'Fold_Arms'}) #
            
            smach.StateMachine.add('Deinit', deinit_SM, 
                                   transitions={'Success': 'Deinit',
                                                'Fail': 'Deinit'})    

    def run(self):
        outcome = self.sm.execute()



class Inhibit_Test_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    def mission_sm(self):
        with self.sm:
            smach.StateMachine.add('Set_To_Off', PCS_Deactivate_State('led'),
                                   transitions={'Complete' : 'Check_For_Inhibit',
                                                'Error': 'Mission_Fail'})

            smach.StateMachine.add('Check_For_Inhibit', Detector_Status('full_inhibit_detection'),
                                  transitions={'On' : 'Turn_On',
                                               'Off' : 'Check_For_Partial_Inhibit'})

            smach.StateMachine.add('Turn_On', PCS_Activate_State('led'),
                                   transitions={'Complete': 'Check_For_Inhibit_Delay',
                                                'Error': 'Mission_Fail'})

            smach.StateMachine.add('Check_For_Inhibit_Delay', Wait_State(1),
                                  transitions={'Complete': 'Check_For_Inhibit'})
            
            smach.StateMachine.add('Check_For_Partial_Inhibit', Detector_Status('partial_inhibit_detection'),
                                   transitions={'On' : 'Run_Partial_Inhibit_Test',
                                                'Off' : 'Finish'})
            smach.StateMachine.add('Run_Partial_Inhibit_Test', Partial_Inhibit_LightBulb_Test_SM,
                        transitions={'Success': 'Mission_Success',
                                     'Fail': 'Mission_Fail'})
            
            
            smach.StateMachine.add('Finish', PCS_Deactivate_State('led'),
                    transitions={'Complete': 'Mission_Success',
                                 'Error': 'Mission_Fail'})

    def run(self):
        outcome = self.sm.execute()


    

if __name__ == "__main__":
    rospy.init_node("mission_sm")
    sm = Inhibit_Test_SM()
    sm.run()