#!/usr/bin/env python

import rospy
import smach
import smach_ros


from daedalus_core.pcs_states import *
#from daedalus_core.pcs_move_states import *

class Mission_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    
    def mission_sm(self):
        with self.sm:
            smach.StateMachine.add('Init_Arm_sync', ARM_Sync('init', timeout=60),
                transitions={'Ready': 'Pickup_Wrench',
                             'Timeout': 'Mission_Fail'})

            smach.StateMachine.add('Pickup_Wrench', Pickup_Wrench_SM,
                    transitions={'Success': 'Unfold',
                                 'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Unfold', Unfold_SM,
                    transitions={'Success': 'Mission_Success',
                                 'Fail': 'Mission_Fail'})






# start SM here
            smach.StateMachine.add('Init_Arms', init_arms(), 
                                   transitions={'Success': 'ARM_Sync', #maybe change this for testing?
                                                 'Fail': 'init'})
            
            smach.StateMachine.add('ARM_Sync', ARM_Sync('init', timeout=60),
                                   transitions={'Ready': 'Unfold_Arms',
                                                'Timeout' : 'init_Arms'})

            smach.StateMachine.add('Unfold_Arms', unfold_SM(), 
                                   transitions={'Success': 'Pickup_Obj_1',
                                                 'Fail': 'Init_Arms'})

# ball 1
            smach.StateMachine.add('Ready_to_Receive_Obj1', ready_to_transfer(),
                                   transitions={'Success': 'Wait_for_ARM1_Obj1',
                                                'Fail': 'Home_Pos_1'} )
            
            smach.StateMachine.add('Wait_For_ARM1_Obj1', wait_for_ARM1(), 
                                   transitions={'Ready': 'Receive_Obj_1',
                                                 'Timout': 'Home_Pos_1'})
            
            smach.StateMachine.add('Receive_Obj_1', receive_Obj(),
                                   transitions={'Success': 'Discard',
                                                'Fail': 'Home_Pos_1'})
            
            smach.StateMachine.add('Discard', discard_obj_SM(), 
                                   transitions={'Success': 'Home_Pos_1',
                                                'Fail': 'Home_Pos_1'})
            
            smach.StateMachine.add('Home_Pos_1', home_pos_1_SM(), 
                                   tranitions={'Success': 'Pickup_Obj_2',
                                               'Fail': 'Home_Pos_1'})

# ball 2
            smach.StateMachine.add('Pickup_Obj_2', pickup_obj_2_SM(), 
                                   transitions={'Success': 'Ready_To_Give_Obj_2',
                                                 'Fail': 'Home_Pos_2'})
            smach.StateMachine.add('Ready_To_Give_Obj_2', ready_to_transfer(),
                                   transitions={'Else': 'Wait_for_ARM1_Obj2'})
            smach.StateMachine.add('Wait_for_ARM1_Obj2', wait_for_ARM1(),
                                   transitions={'Ready': 'Tranfer_Obj2',
                                                'Timout': 'home_pos_2'})
            smach.StateMachine.add('Transfer_Obj2', give_obj(),
                                    transitions={'Else': 'Home_pos_2'})
            smach.StateMachine.add('Home_Pos_2', home_pos_2_SM(), 
                                   transitions={'Else': 'Ready_To_Recieve_Obj3'})

# cube 1
            smach.StateMachine.add('Ready_to_Receive_Obj3', ready_to_transfer(),
                                   transitions={'Ready': 'Wait_for_ARM1_Obj3',
                                                'Fail': 'Mission_Fail'} )
            smach.StateMachine.add('Wait_For_ARM1_Obj3', wait_for_ARM1(), 
                                   transitions={'Ready': 'Receive_Obj_3',
                                                 'Timout': 'Home_Pos_3'})
            smach.StateMachine.add('Receive_Obj_3', receive_Obj(),
                                   transitions={'Else': 'Discard'})
            smach.StateMachine.add('Discard', discard_obj_SM(), 
                                   transitions={'Else': 'Home_Pos_3'})
            smach.StateMachine.add('Home_Pos_3', home_pos_3_SM(), 
                                   tranitions={'Else': 'Fold_Arms'})


# done
            smach.stateMachine.add('Fold_Arms', fold_arms_SM, transitions={'Success': 'Deinit', 'Fail': 'Fold_Arms'})
            smach.StateMachine.add('Deinit', deinit_SM, transitions={'Else': 'Deinit'})    


    def run(self):
        outcome = self.sm.execute()



class Inhibit_Test_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    def mission_sm(self):
        with self.sm:
            smach.StateMachine.add('Set_To_Off', PCS_Deactivate_State('led'),
                                   transitions={'Complete' : 'Check_For_Inhibit',
                                                'Error': 'Mission_Fail'})

            smach.StateMachine.add('Check_For_Inhibit', Detector_Status('full_inhibit_detection'),
                                  transitions={'On' : 'Turn_On',
                                               'Off' : 'Check_For_Partial_Inhibit'})

            smach.StateMachine.add('Turn_On', PCS_Activate_State('led'),
                                   transitions={'Complete': 'Check_For_Inhibit_Delay',
                                                'Error': 'Mission_Fail'})

            smach.StateMachine.add('Check_For_Inhibit_Delay', Wait_State(1),
                                  transitions={'Complete': 'Check_For_Inhibit'})
            
            smach.StateMachine.add('Check_For_Partial_Inhibit', Detector_Status('partial_inhibit_detection'),
                                   transitions={'On' : 'Run_Partial_Inhibit_Test',
                                                'Off' : 'Finish'})
            smach.StateMachine.add('Run_Partial_Inhibit_Test', Partial_Inhibit_LightBulb_Test_SM,
                        transitions={'Success': 'Mission_Success',
                                     'Fail': 'Mission_Fail'})
            
            
            smach.StateMachine.add('Finish', PCS_Deactivate_State('led'),
                    transitions={'Complete': 'Mission_Success',
                                 'Error': 'Mission_Fail'})

    def run(self):
        outcome = self.sm.execute()


    

if __name__ == "__main__":
    rospy.init_node("mission_sm")
    sm = Inhibit_Test_SM()
    sm.run()