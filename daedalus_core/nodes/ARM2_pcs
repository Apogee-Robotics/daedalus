#!/usr/bin/env python

import rospy
import smach
import smach_ros


from daedalus_core.pcs_states import *


class Mission_SM:
    def __init__(self):

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=["Mission_Success", "Mission_Fail"])

        self.mission_sm()

    
    def mission_sm(self):
        with self.sm:
            smach.StateMachine.add('Init_Arm_sync', ARM_Sync('init', timeout=60),
                transitions={'Ready': 'Pickup_Wrench',
                             'Timeout': 'Mission_Fail'})

            smach.StateMachine.add('Pickup_Wrench', Pickup_Wrench_SM,
                    transitions={'Success': 'Unfold',
                                 'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Unfold', Unfold_SM,
                    transitions={'Success': 'Mission_Success',
                                 'Fail': 'Mission_Fail'})






# start SM here
            smach.StateMachine.add('Init_Arms', init_arms(), transitions={'Success': 'Unfold_Arms', 'Fail': 'init'})

            smach.StateMachine.add('Unfold_Arms', unfold_SM, transitions={'Success': 'Pickup_Obj_1', 'Fail': 'init'})

# ball 1
            smach.StateMachine.add('AI_Catch_1', catch_SM_1, transitions={'Success': 'Discard', 'Fail': 'Home_Pos_1'})
            smach.StateMachine.add('Discard', discard_obj_1_SM, transitions={'Else': 'Home_Pos_1'})
            smach.StateMachine.add('Home_Pos_1', home_pos_1_SM, tranitions={'Pickup_Fail_1': 'Pickup_Obj_2', 'Move_On': "Home_Pos_1"})

# ball 2
            smach.StateMachine.add('Pickup_Obj_2', pickup_obj_3_SM, transitions={'Success': 'Throw_2', 'Fail': 'Home_Pos_2'})
            smach.StateMachine.add('Throw_2', throw_2_SM, transitions={'Else': 'Home_pos_2'})
            smach.StateMachine.add('Home_Pos_2', home_pos_3_SM, transitions={'Pickup_Fail_2': 'Pickup_Obj_2', 'Done': 'Fold_Arms', 'Else': 'Home_Pos_2', 'Throw_Flag': 'AI_Catch_3'})

# cube 1
            smach.StateMachine.add('AI_Catch_3', catch_SM, transitions={'Success': 'Discard', 'Fail': 'Home_Pos_3'})
            smach.StateMachine.add('Discard', discard_obj_3_SM, transitions={'Else': 'Home_Pos_3'})
            smach.StateMachine.add('Home_Pos_3', home_pos_3_SM, tranitions={'Pickup_Fail_3': 'Pickup_Obj_3', 'Done': 'Fold_Arms'})

# done
            smach.stateMachine.add('Fold_Arms', fold_arms_SM, transitions={'Success': 'Deinit', 'Fail': 'Fold_Arms'})
            smach.StateMachine.add('Deinit', deinit_SM, transitions={'Else': 'Deinit'})    


    def run(self):
        outcome = self.sm.execute()


if __name__ == "__main__":
    rospy.init_node("mission_sm")
    sm = Mission_SM()
    sm.run()