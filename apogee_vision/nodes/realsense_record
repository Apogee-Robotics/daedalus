#!/usr/bin/env python3

## License: Apache 2.0. See LICENSE file in root directory.
## Copyright(c) 2015-2017 Intel Corporation. All Rights Reserved.

###############################################
##      Open CV and Numpy integration        ##
###############################################

import rospy
from daedalus_msgs.srv import SignalStatus
import time
import os

import pyrealsense2 as rs
import numpy as np
import cv2

WIDTH = 640
HEIGHT = 480
FPS = 15
SECONDS_PER_FILE = 5
FRAMES_PER_FILE = FPS * SECONDS_PER_FILE

# Configure depth and color streams
pipeline = rs.pipeline()
config = rs.config()

# Get device product line for setting a supporting resolution
pipeline_wrapper = rs.pipeline_wrapper(pipeline)
pipeline_profile = config.resolve(pipeline_wrapper)
device = pipeline_profile.get_device()
device_product_line = str(device.get_info(rs.camera_info.product_line))

# found_rgb = False
# for s in device.sensors:
#     if s.get_info(rs.camera_info.name) == 'RGB Camera':
#         found_rgb = True
#         break
# if not found_rgb:
#     print("The demo requires Depth camera with Color sensor")
#     exit(0)

config.enable_stream(rs.stream.depth, WIDTH, HEIGHT, rs.format.z16, 30)

config.enable_stream(rs.stream.color, WIDTH, HEIGHT, rs.format.bgr8, 30)

# Start streaming
pipeline.start(config)

fcc = cv2.VideoWriter_fourcc(*'XVID')
date = time.strftime("%d-%b-%Y", time.localtime())
os.system(f'mkdir /home/norman/catkin_ws/Videos/{date}')
hms = time.strftime('%H-%M-%S', time.localtime())
os.system(f'mkdir /home/norman/catkin_ws/Videos/{date}/{hms}')
file_folder = f'/home/norman/catkin_ws/Videos/{date}/{hms}'
depth_file_folder = file_folder + f'/RawDepthFrames'
os.system(f'mkdir {depth_file_folder}')

file_num = 0

rospy.loginfo("Waiting for TE detection")

try:
    while not rospy.is_shutdown():

        rospy.wait_for_service('te_detection')
        TE_detection = rospy.ServiceProxy('te_detection', SignalStatus)
        if TE_detection:
        # if True:
            rospy.loginfo("TE detected")

            color_file_name = f'{file_folder}/ColorVideoFile{file_num}.avi'
            color_writer = cv2.VideoWriter(color_file_name, fcc, FPS, (WIDTH, HEIGHT))

            depth_file_name = f'{file_folder}/DepthVideoFile{file_num}.avi'
            depth_writer = cv2.VideoWriter(depth_file_name, fcc, FPS, (WIDTH, HEIGHT))

            for frame_num in range(FRAMES_PER_FILE):
                # Wait for a coherent pair of frames: depth and color
                frames = pipeline.wait_for_frames()
                depth_frame = frames.get_depth_frame()
                color_frame = frames.get_color_frame()
                if not depth_frame or not color_frame:
                    continue

                # Convert images to numpy arrays
                depth_image = np.asanyarray(depth_frame.get_data())
                color_image = np.asanyarray(color_frame.get_data())

                # Apply colormap on depth image (image must be converted to 8-bit per pixel first)
                depth_colormap = cv2.applyColorMap(cv2.convertScaleAbs(depth_image, alpha=0.22), cv2.COLORMAP_JET)

                color_writer.write(color_image)
                depth_writer.write(depth_colormap)
                cv2.imwrite(f'{depth_file_folder}/frame{file_num}-{frame_num}.png', depth_image)

            color_writer.release()
            depth_writer.release()
            rospy.loginfo(f'release VideoFile{file_num}')
            print(f'release VideoFile{file_num}')
            file_num += 1


        else:       
            time.sleep(1)

except KeyboardInterrupt:
    # Stop streaming
    pipeline.stop()

finally:

    # Stop streaming
    pipeline.stop()