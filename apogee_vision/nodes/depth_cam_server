#!/usr/bin/env python3

import rospy
import cv2
import numpy as np

from apogee_vision.realsense_camera import RealsenseCamera

from sensor_msgs.msg import Image

def cv_to_imgmsg(img):
    img_msg = Image()
    img_msg.header.stamp = rospy.Time.now()
    img_msg.height = img.shape[0]
    img_msg.width = img.shape[1]
    img_msg.encoding = 'bgr8'
    img_msg.is_bigendian = False
    img_msg.step = 3 * img.shape[1]
    img_msg.data = img.tostring()
    return img_msg

class CamServer():
    def __init__(self):
        self.rs = RealsenseCamera()

        rospy.init_node('depth_cam_server')
        self.rgb_pub = rospy.Publisher('/camera/rgb', Image, queue_size=10)
        self.depth_pub = rospy.Publisher('/camera/depth', Image, queue_size=10)



    def run(self):
        #while not rospy.is_shutdown():
        ret, bgr_frame, depth_frame = self.rs.get_frame_stream()
        if ret == False:
            rospy.logwarn("Error reading depth cam")
        else:
            #rgb_msg = CvBridge().cv2_to_imgmsg(bgr_frame, encoding='bgr8')
            rgb_msg = cv_to_imgmsg(bgr_frame)
            #depth_msg = CvBridge().cv2_to_imgmsg(depth_frame, encoding='32FC1')

            self.rgb_pub.publish(rgb_msg)
            #depth_pub.publish(depth_msg)

            photo_path="/home/norman/catkin_ws/depth_cam_test.jpg"
            cv2.imwrite(photo_path, bgr_frame)

if __name__ == "__main__":
    server = CamServer()
    server.run()