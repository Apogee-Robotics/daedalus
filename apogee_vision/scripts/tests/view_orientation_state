#!/usr/bin/env python

import rospy

import numpy as np
import matplotlib.pyplot as plt 
import time
import math

from daedalus_msgs.msg import OrientationState


plt.ion()
axis = ['x', 'y', 'z', 'dx', 'dy', 'dz'] #'x_c', 'y_c', 'z_c', 'dx_c', 'dy_c', 'dz_c'
w = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
cov = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]


fig, ax = plt.subplots()
bar_plot =ax.bar(axis, w)
cov_plot = ax.bar(axis, cov, bottom=w, alpha=0.5)

def quat_to_euler(x,y,z,w):
    t0 = +2.0 * (w * x + y * z)
    t1 = +1.0 - 2.0 * (x * x + y * y)
    roll_x = math.atan2(t0, t1)
    
    t2 = +2.0 * (w * y - z * x)
    t2 = +1.0 if t2 > +1.0 else t2
    t2 = -1.0 if t2 < -1.0 else t2
    pitch_y = math.asin(t2)
    
    t3 = +2.0 * (w * z + x * y)
    t4 = +1.0 - 2.0 * (y * y + z * z)
    yaw_z = math.atan2(t3, t4)
    
    return roll_x, pitch_y, yaw_z # in radians


def cb(msg):

    w[3] = float(msg.orientation[4])
    w[4] = float(msg.orientation[5])
    w[5] = float(msg.orientation[6])

    r,p,y = quat_to_euler(msg.orientation[0],msg.orientation[1],msg.orientation[2],msg.orientation[3])

    w[0] = r
    w[1] = p
    w[2] = y

    print("r", r, "p", p, "y", y)

    for i in range(0, 6):
        cov[i] = float(msg.covariance[(i*6)+i])


def main():
    rospy.init_node('view_orientation_state')

    rospy.Subscriber("/orientation_state", OrientationState, cb)

    plt.show()

    while not rospy.is_shutdown():
        for rect,h in zip(bar_plot, w):
            rect.set_height(h)
            
        for rect,h,y in zip(cov_plot, cov, w):
            rect.set_height(h)
            rect.set_y(y-(h/2))

        fig.canvas.draw()
        plt.pause(0.0001)

if __name__ == "__main__":
    main()