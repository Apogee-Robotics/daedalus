#!/usr/bin/env python

import rospy
from math import *
import numpy as np
import matplotlib.pyplot as plt 
import time

from geometry_msgs.msg import Twist
from daedalus_msgs.msg import OrientationState

plt.ion()

t = [0]
x_line = [0]
y_line = [0]
z_line = [0]
plt.plot(t, x_line, label='x')
plt.plot(t, y_line, label='y')
plt.plot(t, z_line, label='z')
plt.legend()

w = [0.0, 0.0, 0.0]

def quat_to_axis_angle(q):
    theta = 2*acos(q.w)
    x = q.x*theta/sin(theta/2)
    y = q.y*theta/sin(theta/2)
    z = q.z*theta/sin(theta/2)

    return (x, y, z, theta)

def cb(msg):
    w[0] = msg.orientation[4]
    w[1] = msg.orientation[5]
    w[2] = msg.orientation[6]
    
    #print("x", w[0], "y", w[1], "z", w[2], "w", w[3])

def twist_cb(msg):
    w[0] = msg.angular.x
    w[1] = msg.angular.y
    w[2] = msg.angular.z
    #print("x", w[0], "y", w[1], "z", w[2])


def main():
    rospy.init_node('angular_velocity_grapher')

    rospy.Subscriber("/orientation_state", OrientationState, cb)
    #rospy.Subscriber("/mujoco/object_twist", Twist, twist_cb)

    plt.show()

    iteration = 0

    while not rospy.is_shutdown():
        t.append(iteration)
        x_line.append(w[0])
        y_line.append(w[1])
        z_line.append(w[2])
        plt.scatter(t, x_line, c='blue')
        plt.scatter(t, y_line, c='orange')
        plt.scatter(t, z_line, c='green')
        plt.pause(0.00001)
        iteration += 1

if __name__ == "__main__":
    main()