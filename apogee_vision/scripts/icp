#!/usr/bin/env python3
import rospy
import open3d
import numpy as np
import copy
import math

from std_msgs.msg import Header
from sensor_msgs.msg import PointCloud2, PointField

from apogee_vision.util import convertCloudFromRosToOpen3d



def Xrotate(matrix, angle):
    mat = np.identity(4)
    mat[1, 1] = math.cos(angle)
    mat[1, 2] = -1 * math.sin(angle)
    mat[2, 1] = math.sin(angle)
    mat[2, 2] = math.cos(angle)
    return np.matmul(matrix, mat)

def Yrotate(matrix, angle):
    mat = np.identity(4)
    mat[0, 0] = math.cos(angle)
    mat[0, 2] = math.sin(angle)
    mat[2, 0] = -1*math.sin(angle)
    mat[2, 2] = math.cos(angle)
    return np.matmul(matrix, mat)

def Zrotate(matrix, angle):
    mat = np.identity(4)
    mat[0, 0] = math.cos(angle)
    mat[0, 1] = -1*math.sin(angle)
    mat[1, 0] = math.sin(angle)
    mat[1, 1] = math.cos(angle)
    return np.matmul(matrix, mat)

def Xtranslate(matrix, shift):
    mat = np.identity(4)
    mat[0, 3] = shift
    return np.matmul(matrix, mat)

def Ytranslate(matrix, shift):
    mat = np.identity(4)
    mat[1, 3] = shift
    return np.matmul(matrix, mat)

def Ztranslate(matrix, shift):
    mat = np.identity(4)
    mat[2, 3] = shift
    return np.matmul(matrix, mat)

def scale(matrix, scale):
    mat = np.identity(4)
    mat[0, 0] *= scale
    mat[1, 1] *= scale
    mat[2, 2] *= scale
    return np.matmul(matrix, mat)

def pairwise_registration(source, target, max_correspondence_distance_coarse, max_correspondence_distance_fine):
    print("Apply point-to-plane ICP")
    icp_coarse = open3d.pipelines.registration.registration_icp(
        source, target, max_correspondence_distance_coarse, np.identity(4),
        open3d.pipelines.registration.TransformationEstimationPointToPlane())
    icp_fine = open3d.pipelines.registration.registration_icp(
        source, target, max_correspondence_distance_fine,
        icp_coarse.transformation,
        open3d.pipelines.registration.TransformationEstimationPointToPlane())
    transformation_icp = icp_fine.transformation
    information_icp = open3d.pipelines.registration.get_information_matrix_from_point_clouds(
        source, target, max_correspondence_distance_fine,
        icp_fine.transformation)
    return transformation_icp, information_icp

def full_registration(pcds, max_correspondence_distance_coarse,
                      max_correspondence_distance_fine):
    pose_graph = open3d.pipelines.registration.PoseGraph()
    odometry = np.identity(4)
    pose_graph.nodes.append(open3d.pipelines.registration.PoseGraphNode(odometry))
    n_pcds = len(pcds)
    for source_id in range(n_pcds):
        for target_id in range(source_id + 1, n_pcds):
            transformation_icp, information_icp = pairwise_registration(
                pcds[source_id], pcds[target_id], max_correspondence_distance_coarse, max_correspondence_distance_fine)
            print("Build open3d.pipelines.registration.PoseGraph")
            if target_id == source_id + 1:  # odometry case
                odometry = np.dot(transformation_icp, odometry)
                pose_graph.nodes.append(
                    open3d.pipelines.registration.PoseGraphNode(
                        np.linalg.inv(odometry)))
                pose_graph.edges.append(
                    open3d.pipelines.registration.PoseGraphEdge(source_id,
                                                             target_id,
                                                             transformation_icp,
                                                             information_icp,
                                                             uncertain=False))
            else:  # loop closure case
                pose_graph.edges.append(
                    open3d.pipelines.registration.PoseGraphEdge(source_id,
                                                             target_id,
                                                             transformation_icp,
                                                             information_icp,
                                                             uncertain=True))
    return pose_graph
    



def draw_registration_result(source, target, transformation):
    source_temp = copy.deepcopy(source)
    target_temp = copy.deepcopy(target)
    source_temp.paint_uniform_color([1, 0.706, 0])
    target_temp.paint_uniform_color([0, 0.651, 0.929])
    source_temp.transform(transformation)
    open3d.visualization.draw_geometries([source_temp, target_temp])

class Transformer:
    def __init__(self):
        rospy.init_node('pc_transformer')
        rospy.Subscriber("/point_cloud", PointCloud2, self.pc_cb)

        self.target_pc = None
        self.src_pc = open3d.io.read_point_cloud("/home/cyborg/catkin_ws/src/daedalus/arm2d2_description/meshes/wrench.pcd")
        self.rate = rospy.Rate(5)

    def pc_cb(self, msg):
        print("recv cb")
        self.target_pc = convertCloudFromRosToOpen3d(msg)

    def icp(self):
        while self.target_pc == None and not rospy.is_shutdown():
            print("waiting...")
            self.rate.sleep()

        threshold = 0.02

        trans_init = np.identity(4)
        trans_init = scale(trans_init, 0.09)
        trans_init = Yrotate(trans_init, 1.4)
        trans_init = Xrotate(trans_init, 1.57)
        trans_init = Ztranslate(trans_init, 35)
        trans_init = Xtranslate(trans_init, -20)
        trans_init = Ytranslate(trans_init, -35)

        print("before")
        print(trans_init)
        draw_registration_result(self.src_pc, self.target_pc, trans_init)

        print("p2p ICP")

        reg_p2p = open3d.pipelines.registration.registration_icp(
            self.src_pc, self.target_pc, threshold, trans_init,
            open3d.pipelines.registration.TransformationEstimationPointToPoint(),
            open3d.pipelines.registration.ICPConvergenceCriteria(max_iteration=100000)
        )

        print(reg_p2p)
        print(reg_p2p.transformation)
        draw_registration_result(self.src_pc, self.target_pc, reg_p2p.transformation)

    def main(self):
        while self.target_pc == None and not rospy.is_shutdown():
            print("waiting...")
            self.rate.sleep()
        voxel_size = len(np.asarray(self.target_pc.points))
        max_correspondence_distance_coarse = voxel_size * 15
        max_correspondence_distance_fine = voxel_size * 1.5
        self.target_pc.estimate_normals()
        self.src_pc.estimate_normals()
        pcds_down = [self.target_pc, self.src_pc]
        pose_graph = full_registration(pcds_down,
                                    max_correspondence_distance_coarse,
                                    max_correspondence_distance_fine)
        for point_id in range(len(pcds_down)):
            print(pose_graph.nodes[point_id].pose)
            pcds_down[point_id].transform(pose_graph.nodes[point_id].pose)
            open3d.visualization.draw_geometries(pcds_down)
        print(pose_graph)

if __name__ == "__main__":
    transformer = Transformer()
    transformer.main()