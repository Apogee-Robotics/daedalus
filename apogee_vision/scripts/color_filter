#!/usr/bin/env python3
import rospy
import cv2
from std_msgs.msg import UInt8MultiArray
from std_msgs.msg import MultiArrayDimension
import numpy as np


def get_multi_array(w, h):
    mask_msg = UInt8MultiArray()
    mask_msg.layout.dim.append(MultiArrayDimension())
    mask_msg.layout.dim[0].label = "height"
    mask_msg.layout.dim[0].size = h
    mask_msg.layout.dim[0].stride = w*h
    mask_msg.layout.dim.append(MultiArrayDimension())
    mask_msg.layout.dim[1].label = "width"
    mask_msg.layout.dim[1].size = w
    mask_msg.layout.dim[1].stride = w

    return mask_msg

def main():
    rospy.init_node('color_filter')

    mask_pub = rospy.Publisher('object_mask', UInt8MultiArray, queue_size=1)
    if cv2.cuda.getCudaEnabledDeviceCount() > 0:
        rospy.loginfo("CV2 using GPU")
    else:
        rospy.logwarn("ERR: CV2 NOT USING GPU!")



        
    print('Running...')
    while not rospy.is_shutdown():
        frame_buffer = rospy.wait_for_message("/frame", UInt8MultiArray, timeout=None)
        frame_height = frame_buffer.layout.dim[0].size
        frame_width = frame_buffer.layout.dim[1].size
        frame_channels = frame_buffer.layout.dim[2].size

        mask_msg = get_multi_array(frame_width, frame_height)



        np_frame = np.array(list(frame_buffer.data))
        frame = np.reshape(np_frame, (frame_height, frame_width, frame_channels)).astype(np.uint8)
        frame = np.flip(frame, 0)
        frame = np.flip(frame, 2)


        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        lower_red = np.array([30, 0, 0])
        upper_red = np.array([255, 20, 20])

        mask = cv2.inRange(rgb, lower_red, upper_red)
        #cv2.imshow('Detection', frame)
        #cv2.imshow('Mask', mask)

        np_mask = np.asarray(mask, dtype=np.uint8)

        np_mask = np.reshape(np_mask, newshape=(np_mask.shape[0]*np_mask.shape[1]))
        
        mask_msg.data = np_mask.tolist()
        mask_pub.publish(mask_msg)


        key = cv2.waitKey(1)
        if key == 27:
            break

    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()




