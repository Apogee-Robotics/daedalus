#!/usr/bin/env python3

import rospy
import numpy as np
import cv2
import rospkg
import json
import os 
from copy import deepcopy

from std_msgs.msg import Float32MultiArray
from std_msgs.msg import UInt8MultiArray
from geometry_msgs.msg import Pose

rospack = rospkg.RosPack()

INPUT_IMAGE_SHAPE = (224, 224, 3)
TRAINING_DIR = rospack.get_path('apogee_vision') + "/training"
IMAGE_DIR = TRAINING_DIR + "/images/"
LABEL_DIR = TRAINING_DIR + "/labels/"
FILE_NAME = "object_image"

def pose_to_dict(pose: Pose) -> dict:
    dict_pose = {
        "position": {
            "x": pose.position.x,
            "y": pose.position.y,
            "z": pose.position.z,
        },
        "orientation": {
            "x": pose.orientation.x,
            "y": pose.orientation.y,
            "z": pose.orientation.z,
            "w": pose.orientation.w 
        }
    }
    return dict_pose

# assumes file_name_number
def get_latest_id(dir: str, file_name: str) -> int:
    if not os.path.exists(dir):
        raise Exception("Dir Path does not exist!")

    highest_num = 0
    for f in os.listdir(dir):
        split_text = f.split(file_name + '_')
        try:
            num = int(split_text[1][0])
            if num > highest_num:
                highest_num = num
        except IndexError:
            pass

    return highest_num

class DataGenerator:
    def __init__(self):
        rospy.init_node('data_generator')

        rospy.Subscriber("/cam/object_frame", UInt8MultiArray, self.rgb_cb)
        rospy.Subscriber("/mujoco/object_pose", Pose, self.pose_cb)

        self.frame = None
        self.pose = None

        # time in sec * 10
        self.frame_rcv_time = 0
        self.pose_rcv_time = 0

        self.rate = rospy.Rate(40)
        self.label_id = get_latest_id(IMAGE_DIR, FILE_NAME)

    def rgb_cb(self, msg):
        self.frame_rcv_time = int(rospy.get_rostime().to_sec() * 10)
        np_frame = np.array(list(msg.data))
        frame_height = msg.layout.dim[0].size 
        frame_width = msg.layout.dim[1].size 
        self.frame = np.reshape(np_frame, (frame_height, frame_width, 3)).astype(np.uint8)

    def pose_cb(self, msg):
        self.pose_rcv_time = int(rospy.get_rostime().to_sec() * 10)
        self.pose = msg


    def create_datapoint(self, frame, pose: Pose):
        # Save frame
        filename = FILE_NAME + '_' + str(self.label_id) + '.jpg'
        imagepath = IMAGE_DIR + filename
        cv2.imwrite(imagepath, frame)

        # Save label
        label_dict = None
        label_path = LABEL_DIR + "labels.json"
        if os.path.exists(label_path):
            with open(label_path, 'r') as labelfile:
                label_dict = json.load(labelfile)
        else:
            label_dict = {}


        label_dict[filename] = pose_to_dict(pose)

        json_label = json.dumps(label_dict, indent=4)
            
        with open(label_path, "w") as labelfile:
            labelfile.write(json_label)

        self.label_id += 1



    def run(self):
        while not rospy.is_shutdown():
            if self.frame is not None and self.pose is not None:
                if self.frame_rcv_time == self.pose_rcv_time:
                    # copy to prevent a new callback overiding
                    frame = deepcopy(self.frame)
                    pose = deepcopy(self.pose)

                    frame = np.flip(frame, 0)

                    cv2.imshow('frame', frame)

                    key = cv2.waitKey(1)
                    if key == 27:
                        break

                    self.create_datapoint(frame, pose)

            
            self.rate.sleep()


if __name__ == "__main__":
    generator = DataGenerator()
    generator.run()